# indent w/ 2 spaces
source: |
  def test_sub1(int[5]:i) qubit:q1, qubit[5]:q2 -> int[10] {
    int[10] result;
    if (result == 2) return 1 + result;
    return result;
  }
  def test_sub2(int[5]:i) {
    if (i in {2, 3})
      return;
    return i+1;
  }
reference: |
  program
    header
    globalStatement
      subroutineDefinition
        def
        test_sub1
        (
        classicalArgumentList
          classicalArgument
            classicalType
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
            association
              :
              i
        )
        quantumArgumentList
          quantumArgument
            quantumType
              qubit
            association
              :
              q1
          ,
          quantumArgument
            quantumType
              qubit
            designator
              [
              expression
                expressionTerminator
                  5
              ]
            association
              :
              q2
        returnSignature
          ->
          classicalType
            singleDesignatorType
              int
            designator
              [
              expression
                expressionTerminator
                  10
              ]
        subroutineBlock
          {
          statement
            classicalDeclarationStatement
              classicalDeclaration
                singleDesignatorDeclaration
                  singleDesignatorType
                    int
                  designator
                    [
                    expression
                      expressionTerminator
                        10
                    ]
                  identifierList
                    result
              ;
          statement
            branchingStatement
              if
              (
              booleanExpression
                comparisonExpression
                  expression
                    expressionTerminator
                      result
                  relationalOperator
                    ==
                  expression
                    expressionTerminator
                      2
              )
              programBlock
                controlDirective
                  returnStatement
                    return
                    expression
                      xOrExpression
                        bitAndExpression
                          bitShiftExpression
                            additiveExpression
                              additiveExpression
                                multiplicativeExpression
                                  expressionTerminator
                                    1
                              +
                              multiplicativeExpression
                                expressionTerminator
                                  result
                    ;
          returnStatement
            return
            expression
              expressionTerminator
                result
            ;
          }
    globalStatement
      subroutineDefinition
        def
        test_sub2
        (
        classicalArgumentList
          classicalArgument
            classicalType
              singleDesignatorType
                int
              designator
                [
                expression
                  expressionTerminator
                    5
                ]
            association
              :
              i
        )
        subroutineBlock
          {
          statement
            branchingStatement
              if
              (
              booleanExpression
                membershipTest
                  i
                  in
                  setDeclaration
                    {
                    expressionList
                      expression
                        expressionTerminator
                          2
                      ,
                      expression
                        expressionTerminator
                          3
                    }
              )
              programBlock
                controlDirective
                  returnStatement
                    return
                    ;
          returnStatement
            return
            expression
              xOrExpression
                bitAndExpression
                  bitShiftExpression
                    additiveExpression
                      additiveExpression
                        multiplicativeExpression
                          expressionTerminator
                            i
                      +
                      multiplicativeExpression
                        expressionTerminator
                          1
            ;
          }
